/* File automatically generated by ./Parser/asdl_c.py */

PyAPI_DATA(PyTypeObject) Py_mod_Type;
#define Py_mod_Check(op) PyObject_TypeCheck(op, &Py_mod_Type)

struct Py_mod{
        PyObject_HEAD
};

PyAPI_DATA(PyTypeObject) Py_mod_Module_Type;
#define Py_mod_Module_Check(op) PyObject_TypeCheck(op, &Py_mod_Module_Type)

struct Py_mod_Module{
        struct Py_mod _base;
        PyObject* body; /* stmt */
};
PyObject *Py_mod_Module_New(PyObject*);

PyAPI_DATA(PyTypeObject) Py_mod_Interactive_Type;
#define Py_mod_Interactive_Check(op) PyObject_TypeCheck(op, &Py_mod_Interactive_Type)

struct Py_mod_Interactive{
        struct Py_mod _base;
        PyObject* body; /* stmt */
};
PyObject *Py_mod_Interactive_New(PyObject*);

PyAPI_DATA(PyTypeObject) Py_mod_Expression_Type;
#define Py_mod_Expression_Check(op) PyObject_TypeCheck(op, &Py_mod_Expression_Type)

struct Py_mod_Expression{
        struct Py_mod _base;
        PyObject* body; /* expr */
};
PyObject *Py_mod_Expression_New(PyObject*);

PyAPI_DATA(PyTypeObject) Py_mod_Suite_Type;
#define Py_mod_Suite_Check(op) PyObject_TypeCheck(op, &Py_mod_Suite_Type)

struct Py_mod_Suite{
        struct Py_mod _base;
        PyObject* body; /* stmt */
};
PyObject *Py_mod_Suite_New(PyObject*);

PyAPI_DATA(PyTypeObject) Py_stmt_Type;
#define Py_stmt_Check(op) PyObject_TypeCheck(op, &Py_stmt_Type)

struct Py_stmt{
        PyObject_HEAD
        int lineno;
};

PyAPI_DATA(PyTypeObject) Py_stmt_FunctionDef_Type;
#define Py_stmt_FunctionDef_Check(op) PyObject_TypeCheck(op, &Py_stmt_FunctionDef_Type)

struct Py_stmt_FunctionDef{
        struct Py_stmt _base;
        PyObject* name; /* identifier */
        PyObject* args; /* arguments */
        PyObject* body; /* stmt */
        PyObject* decorators; /* expr */
};
PyObject *Py_stmt_FunctionDef_New(PyObject*, PyObject*, PyObject*, PyObject*,
                                  int);

PyAPI_DATA(PyTypeObject) Py_stmt_ClassDef_Type;
#define Py_stmt_ClassDef_Check(op) PyObject_TypeCheck(op, &Py_stmt_ClassDef_Type)

struct Py_stmt_ClassDef{
        struct Py_stmt _base;
        PyObject* name; /* identifier */
        PyObject* bases; /* expr */
        PyObject* body; /* stmt */
};
PyObject *Py_stmt_ClassDef_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_Return_Type;
#define Py_stmt_Return_Check(op) PyObject_TypeCheck(op, &Py_stmt_Return_Type)

struct Py_stmt_Return{
        struct Py_stmt _base;
        PyObject* value; /* expr */
};
PyObject *Py_stmt_Return_New(PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_Delete_Type;
#define Py_stmt_Delete_Check(op) PyObject_TypeCheck(op, &Py_stmt_Delete_Type)

struct Py_stmt_Delete{
        struct Py_stmt _base;
        PyObject* targets; /* expr */
};
PyObject *Py_stmt_Delete_New(PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_Assign_Type;
#define Py_stmt_Assign_Check(op) PyObject_TypeCheck(op, &Py_stmt_Assign_Type)

struct Py_stmt_Assign{
        struct Py_stmt _base;
        PyObject* targets; /* expr */
        PyObject* value; /* expr */
};
PyObject *Py_stmt_Assign_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_AugAssign_Type;
#define Py_stmt_AugAssign_Check(op) PyObject_TypeCheck(op, &Py_stmt_AugAssign_Type)

struct Py_stmt_AugAssign{
        struct Py_stmt _base;
        PyObject* target; /* expr */
        PyObject* op; /* operator */
        PyObject* value; /* expr */
};
PyObject *Py_stmt_AugAssign_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_Print_Type;
#define Py_stmt_Print_Check(op) PyObject_TypeCheck(op, &Py_stmt_Print_Type)

struct Py_stmt_Print{
        struct Py_stmt _base;
        PyObject* dest; /* expr */
        PyObject* values; /* expr */
        PyObject* nl; /* bool */
};
PyObject *Py_stmt_Print_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_For_Type;
#define Py_stmt_For_Check(op) PyObject_TypeCheck(op, &Py_stmt_For_Type)

struct Py_stmt_For{
        struct Py_stmt _base;
        PyObject* target; /* expr */
        PyObject* iter; /* expr */
        PyObject* body; /* stmt */
        PyObject* orelse; /* stmt */
};
PyObject *Py_stmt_For_New(PyObject*, PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_While_Type;
#define Py_stmt_While_Check(op) PyObject_TypeCheck(op, &Py_stmt_While_Type)

struct Py_stmt_While{
        struct Py_stmt _base;
        PyObject* test; /* expr */
        PyObject* body; /* stmt */
        PyObject* orelse; /* stmt */
};
PyObject *Py_stmt_While_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_If_Type;
#define Py_stmt_If_Check(op) PyObject_TypeCheck(op, &Py_stmt_If_Type)

struct Py_stmt_If{
        struct Py_stmt _base;
        PyObject* test; /* expr */
        PyObject* body; /* stmt */
        PyObject* orelse; /* stmt */
};
PyObject *Py_stmt_If_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_Raise_Type;
#define Py_stmt_Raise_Check(op) PyObject_TypeCheck(op, &Py_stmt_Raise_Type)

struct Py_stmt_Raise{
        struct Py_stmt _base;
        PyObject* type; /* expr */
        PyObject* inst; /* expr */
        PyObject* tback; /* expr */
};
PyObject *Py_stmt_Raise_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_TryExcept_Type;
#define Py_stmt_TryExcept_Check(op) PyObject_TypeCheck(op, &Py_stmt_TryExcept_Type)

struct Py_stmt_TryExcept{
        struct Py_stmt _base;
        PyObject* body; /* stmt */
        PyObject* handlers; /* excepthandler */
        PyObject* orelse; /* stmt */
};
PyObject *Py_stmt_TryExcept_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_TryFinally_Type;
#define Py_stmt_TryFinally_Check(op) PyObject_TypeCheck(op, &Py_stmt_TryFinally_Type)

struct Py_stmt_TryFinally{
        struct Py_stmt _base;
        PyObject* body; /* stmt */
        PyObject* finalbody; /* stmt */
};
PyObject *Py_stmt_TryFinally_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_Assert_Type;
#define Py_stmt_Assert_Check(op) PyObject_TypeCheck(op, &Py_stmt_Assert_Type)

struct Py_stmt_Assert{
        struct Py_stmt _base;
        PyObject* test; /* expr */
        PyObject* msg; /* expr */
};
PyObject *Py_stmt_Assert_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_Import_Type;
#define Py_stmt_Import_Check(op) PyObject_TypeCheck(op, &Py_stmt_Import_Type)

struct Py_stmt_Import{
        struct Py_stmt _base;
        PyObject* names; /* alias */
};
PyObject *Py_stmt_Import_New(PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_ImportFrom_Type;
#define Py_stmt_ImportFrom_Check(op) PyObject_TypeCheck(op, &Py_stmt_ImportFrom_Type)

struct Py_stmt_ImportFrom{
        struct Py_stmt _base;
        PyObject* module; /* identifier */
        PyObject* names; /* alias */
};
PyObject *Py_stmt_ImportFrom_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_Exec_Type;
#define Py_stmt_Exec_Check(op) PyObject_TypeCheck(op, &Py_stmt_Exec_Type)

struct Py_stmt_Exec{
        struct Py_stmt _base;
        PyObject* body; /* expr */
        PyObject* globals; /* expr */
        PyObject* locals; /* expr */
};
PyObject *Py_stmt_Exec_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_Global_Type;
#define Py_stmt_Global_Check(op) PyObject_TypeCheck(op, &Py_stmt_Global_Type)

struct Py_stmt_Global{
        struct Py_stmt _base;
        PyObject* names; /* identifier */
};
PyObject *Py_stmt_Global_New(PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_Expr_Type;
#define Py_stmt_Expr_Check(op) PyObject_TypeCheck(op, &Py_stmt_Expr_Type)

struct Py_stmt_Expr{
        struct Py_stmt _base;
        PyObject* value; /* expr */
};
PyObject *Py_stmt_Expr_New(PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_stmt_Pass_Type;
#define Py_stmt_Pass_Check(op) PyObject_TypeCheck(op, &Py_stmt_Pass_Type)

struct Py_stmt_Pass{
        struct Py_stmt _base;
};
PyObject *Py_stmt_Pass_New(int);

PyAPI_DATA(PyTypeObject) Py_stmt_Break_Type;
#define Py_stmt_Break_Check(op) PyObject_TypeCheck(op, &Py_stmt_Break_Type)

struct Py_stmt_Break{
        struct Py_stmt _base;
};
PyObject *Py_stmt_Break_New(int);

PyAPI_DATA(PyTypeObject) Py_stmt_Continue_Type;
#define Py_stmt_Continue_Check(op) PyObject_TypeCheck(op, &Py_stmt_Continue_Type)

struct Py_stmt_Continue{
        struct Py_stmt _base;
};
PyObject *Py_stmt_Continue_New(int);

PyAPI_DATA(PyTypeObject) Py_expr_Type;
#define Py_expr_Check(op) PyObject_TypeCheck(op, &Py_expr_Type)

struct Py_expr{
        PyObject_HEAD
        int lineno;
};

PyAPI_DATA(PyTypeObject) Py_expr_BoolOp_Type;
#define Py_expr_BoolOp_Check(op) PyObject_TypeCheck(op, &Py_expr_BoolOp_Type)

struct Py_expr_BoolOp{
        struct Py_expr _base;
        PyObject* op; /* boolop */
        PyObject* values; /* expr */
};
PyObject *Py_expr_BoolOp_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_BinOp_Type;
#define Py_expr_BinOp_Check(op) PyObject_TypeCheck(op, &Py_expr_BinOp_Type)

struct Py_expr_BinOp{
        struct Py_expr _base;
        PyObject* left; /* expr */
        PyObject* op; /* operator */
        PyObject* right; /* expr */
};
PyObject *Py_expr_BinOp_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_UnaryOp_Type;
#define Py_expr_UnaryOp_Check(op) PyObject_TypeCheck(op, &Py_expr_UnaryOp_Type)

struct Py_expr_UnaryOp{
        struct Py_expr _base;
        PyObject* op; /* unaryop */
        PyObject* operand; /* expr */
};
PyObject *Py_expr_UnaryOp_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Lambda_Type;
#define Py_expr_Lambda_Check(op) PyObject_TypeCheck(op, &Py_expr_Lambda_Type)

struct Py_expr_Lambda{
        struct Py_expr _base;
        PyObject* args; /* arguments */
        PyObject* body; /* expr */
};
PyObject *Py_expr_Lambda_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Dict_Type;
#define Py_expr_Dict_Check(op) PyObject_TypeCheck(op, &Py_expr_Dict_Type)

struct Py_expr_Dict{
        struct Py_expr _base;
        PyObject* keys; /* expr */
        PyObject* values; /* expr */
};
PyObject *Py_expr_Dict_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_ListComp_Type;
#define Py_expr_ListComp_Check(op) PyObject_TypeCheck(op, &Py_expr_ListComp_Type)

struct Py_expr_ListComp{
        struct Py_expr _base;
        PyObject* elt; /* expr */
        PyObject* generators; /* comprehension */
};
PyObject *Py_expr_ListComp_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_GeneratorExp_Type;
#define Py_expr_GeneratorExp_Check(op) PyObject_TypeCheck(op, &Py_expr_GeneratorExp_Type)

struct Py_expr_GeneratorExp{
        struct Py_expr _base;
        PyObject* elt; /* expr */
        PyObject* generators; /* comprehension */
};
PyObject *Py_expr_GeneratorExp_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Yield_Type;
#define Py_expr_Yield_Check(op) PyObject_TypeCheck(op, &Py_expr_Yield_Type)

struct Py_expr_Yield{
        struct Py_expr _base;
        PyObject* value; /* expr */
};
PyObject *Py_expr_Yield_New(PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Compare_Type;
#define Py_expr_Compare_Check(op) PyObject_TypeCheck(op, &Py_expr_Compare_Type)

struct Py_expr_Compare{
        struct Py_expr _base;
        PyObject* left; /* expr */
        PyObject* ops; /* cmpop */
        PyObject* comparators; /* expr */
};
PyObject *Py_expr_Compare_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Call_Type;
#define Py_expr_Call_Check(op) PyObject_TypeCheck(op, &Py_expr_Call_Type)

struct Py_expr_Call{
        struct Py_expr _base;
        PyObject* func; /* expr */
        PyObject* args; /* expr */
        PyObject* keywords; /* keyword */
        PyObject* starargs; /* expr */
        PyObject* kwargs; /* expr */
};
PyObject *Py_expr_Call_New(PyObject*, PyObject*, PyObject*, PyObject*,
                           PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Repr_Type;
#define Py_expr_Repr_Check(op) PyObject_TypeCheck(op, &Py_expr_Repr_Type)

struct Py_expr_Repr{
        struct Py_expr _base;
        PyObject* value; /* expr */
};
PyObject *Py_expr_Repr_New(PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Num_Type;
#define Py_expr_Num_Check(op) PyObject_TypeCheck(op, &Py_expr_Num_Type)

struct Py_expr_Num{
        struct Py_expr _base;
        PyObject* n; /* object */
};
PyObject *Py_expr_Num_New(PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Str_Type;
#define Py_expr_Str_Check(op) PyObject_TypeCheck(op, &Py_expr_Str_Type)

struct Py_expr_Str{
        struct Py_expr _base;
        PyObject* s; /* string */
};
PyObject *Py_expr_Str_New(PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Attribute_Type;
#define Py_expr_Attribute_Check(op) PyObject_TypeCheck(op, &Py_expr_Attribute_Type)

struct Py_expr_Attribute{
        struct Py_expr _base;
        PyObject* value; /* expr */
        PyObject* attr; /* identifier */
        PyObject* ctx; /* expr_context */
};
PyObject *Py_expr_Attribute_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Subscript_Type;
#define Py_expr_Subscript_Check(op) PyObject_TypeCheck(op, &Py_expr_Subscript_Type)

struct Py_expr_Subscript{
        struct Py_expr _base;
        PyObject* value; /* expr */
        PyObject* slice; /* slice */
        PyObject* ctx; /* expr_context */
};
PyObject *Py_expr_Subscript_New(PyObject*, PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Name_Type;
#define Py_expr_Name_Check(op) PyObject_TypeCheck(op, &Py_expr_Name_Type)

struct Py_expr_Name{
        struct Py_expr _base;
        PyObject* id; /* identifier */
        PyObject* ctx; /* expr_context */
};
PyObject *Py_expr_Name_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_List_Type;
#define Py_expr_List_Check(op) PyObject_TypeCheck(op, &Py_expr_List_Type)

struct Py_expr_List{
        struct Py_expr _base;
        PyObject* elts; /* expr */
        PyObject* ctx; /* expr_context */
};
PyObject *Py_expr_List_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_expr_Tuple_Type;
#define Py_expr_Tuple_Check(op) PyObject_TypeCheck(op, &Py_expr_Tuple_Type)

struct Py_expr_Tuple{
        struct Py_expr _base;
        PyObject* elts; /* expr */
        PyObject* ctx; /* expr_context */
};
PyObject *Py_expr_Tuple_New(PyObject*, PyObject*, int);

PyAPI_DATA(PyTypeObject) Py_slice_Type;
#define Py_slice_Check(op) PyObject_TypeCheck(op, &Py_slice_Type)

struct Py_slice{
        PyObject_HEAD
};

PyAPI_DATA(PyTypeObject) Py_slice_Ellipsis_Type;
#define Py_slice_Ellipsis_Check(op) PyObject_TypeCheck(op, &Py_slice_Ellipsis_Type)

struct Py_slice_Ellipsis{
        struct Py_slice _base;
};
PyObject *Py_slice_Ellipsis_New(void);

PyAPI_DATA(PyTypeObject) Py_slice_Slice_Type;
#define Py_slice_Slice_Check(op) PyObject_TypeCheck(op, &Py_slice_Slice_Type)

struct Py_slice_Slice{
        struct Py_slice _base;
        PyObject* lower; /* expr */
        PyObject* upper; /* expr */
        PyObject* step; /* expr */
};
PyObject *Py_slice_Slice_New(PyObject*, PyObject*, PyObject*);

PyAPI_DATA(PyTypeObject) Py_slice_ExtSlice_Type;
#define Py_slice_ExtSlice_Check(op) PyObject_TypeCheck(op, &Py_slice_ExtSlice_Type)

struct Py_slice_ExtSlice{
        struct Py_slice _base;
        PyObject* dims; /* slice */
};
PyObject *Py_slice_ExtSlice_New(PyObject*);

PyAPI_DATA(PyTypeObject) Py_slice_Index_Type;
#define Py_slice_Index_Check(op) PyObject_TypeCheck(op, &Py_slice_Index_Type)

struct Py_slice_Index{
        struct Py_slice _base;
        PyObject* value; /* expr */
};
PyObject *Py_slice_Index_New(PyObject*);

PyAPI_DATA(PyTypeObject) Py_comprehension_Type;
#define Py_comprehension_Check(op) PyObject_TypeCheck(op, &Py_comprehension_Type)

struct Py_comprehension {
        PyObject_HEAD
        PyObject* target; /* expr */
        PyObject* iter; /* expr */
        PyObject* ifs; /* expr */
};
PyObject *Py_comprehension_New(PyObject*, PyObject*, PyObject*);

PyAPI_DATA(PyTypeObject) Py_excepthandler_Type;
#define Py_excepthandler_Check(op) PyObject_TypeCheck(op, &Py_excepthandler_Type)

struct Py_excepthandler {
        PyObject_HEAD
        PyObject* type; /* expr */
        PyObject* name; /* expr */
        PyObject* body; /* stmt */
};
PyObject *Py_excepthandler_New(PyObject*, PyObject*, PyObject*);

PyAPI_DATA(PyTypeObject) Py_arguments_Type;
#define Py_arguments_Check(op) PyObject_TypeCheck(op, &Py_arguments_Type)

struct Py_arguments {
        PyObject_HEAD
        PyObject* args; /* expr */
        PyObject* vararg; /* identifier */
        PyObject* kwarg; /* identifier */
        PyObject* defaults; /* expr */
};
PyObject *Py_arguments_New(PyObject*, PyObject*, PyObject*, PyObject*);

PyAPI_DATA(PyTypeObject) Py_keyword_Type;
#define Py_keyword_Check(op) PyObject_TypeCheck(op, &Py_keyword_Type)

struct Py_keyword {
        PyObject_HEAD
        PyObject* arg; /* identifier */
        PyObject* value; /* expr */
};
PyObject *Py_keyword_New(PyObject*, PyObject*);

PyAPI_DATA(PyTypeObject) Py_alias_Type;
#define Py_alias_Check(op) PyObject_TypeCheck(op, &Py_alias_Type)

struct Py_alias {
        PyObject_HEAD
        PyObject* name; /* identifier */
        PyObject* asname; /* identifier */
};
PyObject *Py_alias_New(PyObject*, PyObject*);

