dnl Some parts taken from Python's configure.in.

dnl Only use correct autoconf version:
m4_define([version_required],
[m4_if(m4_version_compare(m4_defn([m4_PACKAGE_VERSION]), [$1]), 0,
       [],
       [m4_fatal([Autoconf version $1 is required for mpdecimal], 63)])
])
version_required(2.67)

AC_INIT(mpdecimal, 2.0, mpdecimal-bugs@bytereef.org, mpdecimal-2.0.tar.gz, http://www.bytereef.org/libmpdec.html)
AC_CONFIG_HEADER(config.h)
AC_CONFIG_FILES([Makefile tests/Makefile])
AC_ARG_VAR(MACHINE, [force configuration: x64, uint128, ansi64, ppro, ansi32, ansi-legacy, universal])

LIBSHARED=libmpdec.so.$PACKAGE_VERSION
AC_SUBST(LIBSHARED)

# Language and compiler:
AC_LANG_C
saved_cflags=$CFLAGS
AC_PROG_CC
CFLAGS=$saved_cflags

# System and machine type:
AC_MSG_CHECKING(system as reported by uname -s)
ac_sys_system=`uname -s`
AC_MSG_RESULT($ac_sys_system)

AC_MSG_CHECKING(machine type as reported by uname -m)
ac_sys_machine=`uname -m`
AC_MSG_RESULT($ac_sys_machine)

# Checks for header files:
AC_HEADER_STDC
AC_CHECK_HEADERS(inttypes.h stdint.h)

# Type availability checks:
AC_TYPE_SIZE_T
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_CHECK_TYPE(__uint128_t, AC_DEFINE(HAVE_UINT128_T, 1,
              [Define if your compiler provides __uint128_t]),,)

# Sizes of various types:
AC_CHECK_SIZEOF(size_t, 4)
AC_CHECK_SIZEOF(__uint128_t, 8)

# x64 with gcc asm:
AC_MSG_CHECKING(for x64 gcc inline assembler)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[
  __asm__ __volatile__ ("movq %rcx, %rax");
]])],[have_gcc_asm_for_x64=yes],[have_gcc_asm_for_x64=no])
AC_MSG_RESULT($have_gcc_asm_for_x64)
if test "$have_gcc_asm_for_x64" = yes; then
    AC_DEFINE(HAVE_GCC_ASM_FOR_X64, 1,
    [Define if we can use x64 gcc inline assembler])
fi

# x87 with gcc asm:
AC_MSG_CHECKING(for x87 gcc inline assembler)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[
  unsigned short cw;
  __asm__ __volatile__ ("fnstcw %0" : "=m" (cw));
  __asm__ __volatile__ ("fldcw %0" : : "m" (cw));
]])],[have_gcc_asm_for_x87=yes],[have_gcc_asm_for_x87=no])
AC_MSG_RESULT($have_gcc_asm_for_x87)
if test "$have_gcc_asm_for_x87" = yes; then
    AC_DEFINE(HAVE_GCC_ASM_FOR_X87, 1,
    [Define if we can use x87 gcc inline assembler])
fi

# gmp for extended tests:
GMPDEPS=
GMPPATH=
saved_ldflags="$LDFLAGS"
saved_cflags="$CFLAGS"
LDFLAGS=-lgmp
AC_MSG_CHECKING(for gmp)
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include <gmp.h>
]], [[
   mpz_t x;
   mpz_init(x);
]])], [have_gmp=yes], [have_gmp=no])
if test $have_gmp = no; then
    LDFLAGS="-L/usr/local/lib -lgmp"
    CFLAGS="-I/usr/local/include"
    AC_LINK_IFELSE([AC_LANG_PROGRAM([[
    #include <gmp.h>
    ]], [[
       mpz_t x;
       mpz_init(x);
    ]])], [have_gmp=yes], [have_gmp=no])
    if test $have_gmp = yes; then
        GMPPATH=/usr/local
    fi
fi
AC_MSG_RESULT($have_gmp)
LDFLAGS="$saved_ldflags"
CFLAGS="$saved_cflags"

if test $have_gmp = yes; then
    GMPDEPS="mpd_mpz_add mpd_mpz_divmod mpd_mpz_mul mpd_mpz_sub"
fi
AC_SUBST(GMPDEPS)
AC_SUBST(GMPPATH)

# suncc is dectected as cc:
case $ac_sys_system in
sun*|Sun*)
    case $CC in
        cc|suncc)
            CC=suncc
            ;;
    esac
esac

# Compiler dependent settings:
AR=ar
MPD_WARN="-Wall"
MPD_OPT="-O2 -fpic"
MPD_PGEN=
MPD_PUSE=
MPD_CCOV=
MPD_LDCOV=
case $CC in
    gcc)
        MPD_WARN="-Wall -W -Wno-unknown-pragmas"
        MPD_OPT="-O2 -fpic -s"
        MPD_PGEN="-fprofile-generate -fprofile-values"
        MPD_PUSE="-fprofile-use -freorder-blocks"
	MPD_CCOV="-DTEST_COVERAGE -O0 -g -fno-inline -fprofile-arcs -ftest-coverage -fpic"
	MPD_LDCOV="-fprofile-arcs"
        ;;
    icc)
        AR=xiar
        MPD_WARN="-Wall -Wno-unknown-pragmas"
        MPD_OPT="-O2 -fpic -s"
        MPD_PGEN="-wd11505 -prof-gen"
        MPD_PUSE="-wd11505 -prof-use"
        ;;
    clang)
        MPD_WARN="-Wall -W -Wno-unknown-pragmas"
        MPD_OPT="-O2 -fpic"
        ;;
    suncc)
        MPD_WARN=
        MPD_OPT="-O2 -fpic -s"
        ;;
esac

# Auto-detect machine dependent settings:
M32=
if test -n "$MACHINE"; then
    M32="-m32 "
    case "$MACHINE" in
        x64|uint128|ansi64|full_coverage|ppro|ansi32|ansi-legacy|universal)
            : ;;
        *)
            echo "configure: error: invalid MACHINE variable: $MACHINE"
            exit 1 ;;
    esac
elif test $ac_cv_sizeof_size_t -eq 8; then
    if test $have_gcc_asm_for_x64 = yes; then
        MACHINE="x64"
    elif test $ac_cv_sizeof__uint128_t -eq 8; then
        MACHINE="uint128"
    else
        MACHINE="ansi64"
    fi
else
    MACHINE="ansi32"
    if test $have_gcc_asm_for_x87 = yes; then
        case $CC in
            gcc|clang) # icc >= 11.0 works as well
                case $ac_sys_system in
                    darwin|Darwin)
                    ;;
                *)
                    MACHINE="ppro"
                    ;;
                esac
            ;;
        esac
    fi
fi

# Set configuration variables:
MPD_PREC=9
MPD_DPREC=18
CONFIGURE_LDFLAGS=
case "$MACHINE" in
    x64)
        MPD_CONFIG="-DCONFIG_64 -DASM"
        MPD_PREC=19
        MPD_DPREC=38
        ;;
    uint128)
        MPD_CONFIG="-DCONFIG_64 -DANSI -DHAVE_UINT128_T"
        MPD_PREC=19
        MPD_DPREC=38
        ;;
    ansi64)
        MPD_CONFIG="-DCONFIG_64 -DANSI"
        MPD_PREC=19
        MPD_DPREC=38
        ;;
    full_coverage)
        # Formerly ansi64c32, for testing only!
        MPD_CONFIG="-DCONFIG_32 -DANSI"
        ;;
    ppro)
        MPD_CONFIG=$M32"-DCONFIG_32 -DPPRO -DASM"
        CONFIGURE_LDFLAGS=$M32
        ;;
    ansi32)
        MPD_CONFIG=$M32"-DCONFIG_32 -DANSI"
        CONFIGURE_LDFLAGS=$M32
        ;;
    ansi-legacy)
        MPD_CONFIG=$M32"-DCONFIG_32 -DANSI -DLEGACY_COMPILER"
        CONFIGURE_LDFLAGS=$M32
        ;;
    universal)
        MPD_CONFIG="-DUNIVERSAL"
esac


# Substitute variables and generate output:
AC_SUBST(AR)
AC_SUBST(MPD_HEADER)
AC_SUBST(MPD_WARN)
AC_SUBST(MPD_CONFIG)
AC_SUBST(MPD_OPT)

AC_SUBST(MPD_CCOV)
AC_SUBST(MPD_LDCOV)
AC_SUBST(MPD_PGEN)
AC_SUBST(MPD_PUSE)
AC_SUBST(MPD_PREC)
AC_SUBST(MPD_DPREC)

if test -z "$CFLAGS"; then
    CONFIGURE_CFLAGS="$MPD_WARN $MPD_CONFIG $MPD_OPT"
else
    CONFIGURE_CFLAGS="$CFLAGS"
fi

if test -n "$LDFLAGS"; then
    CONFIGURE_LDFLAGS="$LDFLAGS"
fi

AC_SUBST(CONFIGURE_CFLAGS)
AC_SUBST(CONFIGURE_LDFLAGS)

AC_OUTPUT



